commit ca0e2a01677f2a76ae56680883ab616a14a57ba8
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Tue Jul 11 14:17:52 2023 +0200

    Improve NYET error handling on Genode

diff --git a/drivers/usb/host/dwc_otg/dwc_otg_hcd.h b/drivers/usb/host/dwc_otg/dwc_otg_hcd.h
index 5ed8dccf0..0aea10408 100644
--- a/drivers/usb/host/dwc_otg/dwc_otg_hcd.h
+++ b/drivers/usb/host/dwc_otg/dwc_otg_hcd.h
@@ -218,6 +218,11 @@ typedef struct dwc_otg_qtd {
 	 */
 	uint8_t error_count;
 
+	/**
+	 * Number of attempted CSPLIT retries after NYET response
+	 */
+	uint8_t csplit_retry_count;
+
 	/**
 	 * Index of the next frame descriptor for an isochronous transfer. A
 	 * frame descriptor describes the buffer position and length of the
diff --git a/drivers/usb/host/dwc_otg/dwc_otg_hcd_intr.c b/drivers/usb/host/dwc_otg/dwc_otg_hcd_intr.c
index c605419bd..099d2da63 100644
--- a/drivers/usb/host/dwc_otg/dwc_otg_hcd_intr.c
+++ b/drivers/usb/host/dwc_otg/dwc_otg_hcd_intr.c
@@ -1140,6 +1140,7 @@ static void complete_non_periodic_xfer(dwc_otg_hcd_t * hcd,
 	hcint_data_t hcint;
 
 	qtd->error_count = 0;
+	qtd->csplit_retry_count = 0;
 
 	hcint.d32 = DWC_READ_REG32(&hc_regs->hcint);
 	if (hcint.b.nyet) {
@@ -1191,6 +1192,7 @@ static void complete_periodic_xfer(dwc_otg_hcd_t * hcd,
 {
 	hctsiz_data_t hctsiz;
 	qtd->error_count = 0;
+	qtd->csplit_retry_count = 0;
 
 	hctsiz.d32 = DWC_READ_REG32(&hc_regs->hctsiz);
 	if (!hc->ep_is_in || hctsiz.b.pktcnt == 0) {
@@ -1501,6 +1503,7 @@ static int32_t handle_hc_nak_intr(dwc_otg_hcd_t * hcd,
 	if (hc->do_split) {
 		if (hc->complete_split) {
 			qtd->error_count = 0;
+			qtd->csplit_retry_count = 0;
 		}
 		qtd->complete_split = 0;
 		halt_channel(hcd, hc, qtd, DWC_OTG_HC_XFER_NAK);
@@ -1522,6 +1525,7 @@ static int32_t handle_hc_nak_intr(dwc_otg_hcd_t * hcd,
 			disable_hc_int(hc_regs, datatglerr);
 			disable_hc_int(hc_regs, ack);
 			qtd->error_count = 0;
+			qtd->csplit_retry_count = 0;
 			goto handle_nak_done;
 		}
 
@@ -1531,6 +1535,7 @@ static int32_t handle_hc_nak_intr(dwc_otg_hcd_t * hcd,
 		 * queued as request queue space is available.
 		 */
 		qtd->error_count = 0;
+		qtd->csplit_retry_count = 0;
 
 		if (!hc->qh->ping_state) {
 			update_urb_state_xfer_intr(hc, hc_regs,
@@ -1551,6 +1556,7 @@ static int32_t handle_hc_nak_intr(dwc_otg_hcd_t * hcd,
 		break;
 	case UE_INTERRUPT:
 		qtd->error_count = 0;
+		qtd->csplit_retry_count = 0;
 		halt_channel(hcd, hc, qtd, DWC_OTG_HC_XFER_NAK);
 		break;
 	case UE_ISOCHRONOUS:
@@ -1642,6 +1648,7 @@ static int32_t handle_hc_ack_intr(dwc_otg_hcd_t * hcd,
 			disable_hc_int(hc_regs, nak);
 		}
 		qtd->error_count = 0;
+		qtd->csplit_retry_count = 0;
 
 		if (hc->qh->ping_state) {
 			hc->qh->ping_state = 0;
@@ -1701,6 +1708,7 @@ static int32_t handle_hc_nyet_intr(dwc_otg_hcd_t * hcd,
 
 		if (hc->ep_type == DWC_OTG_EP_TYPE_INTR ||
 		    hc->ep_type == DWC_OTG_EP_TYPE_ISOC) {
+#if 0
 			int frnum = dwc_otg_hcd_get_frame_number(hcd);
 
 			// With the FIQ running we only ever see the failed NYET
@@ -1711,6 +1719,27 @@ static int32_t handle_hc_nyet_intr(dwc_otg_hcd_t * hcd,
 				 * No longer in the same full speed frame.
 				 * Treat this as a transaction error.
 				 */
+#else
+			/*
+			 * The frame number comparison above is an unreliable error
+			 * indicator on Genode, because 'sched_frame' does not
+			 * always reflect the frame number when the transaction was
+			 * actually submitted to the host controller. If the
+			 * 'start-split' transaction is scheduled on microframe 7
+			 * (range 0..7) and submitted to the host controller in
+			 * microframe 7 of a later full frame, the
+			 * 'dwc_otg_hcd_qh_deactivate()' function does not ensure
+			 * the minimum delay of 1 microframe between 'start-split'
+			 * and 'complete-split' anymore and both transactions might
+			 * be submitted in the same microframe. If this causes a
+			 * NYET response in the next microframe (0), the frame
+			 * number comparison above would come to the conclusion
+			 * that a retry would already be too late. So, we use a
+			 * retry counter instead.
+			 */
+			if (qtd->csplit_retry_count == 2) {
+#endif
+
 #if 0
 				/** @todo Fix system performance so this can
 				 * be treated as an error. Right now complete
@@ -1728,12 +1757,15 @@ static int32_t handle_hc_nyet_intr(dwc_otg_hcd_t * hcd,
 			}
 		}
 
+		qtd->csplit_retry_count++;
+
 		halt_channel(hcd, hc, qtd, DWC_OTG_HC_XFER_NYET);
 		goto handle_nyet_done;
 	}
 
 	hc->qh->ping_state = 1;
 	qtd->error_count = 0;
+	qtd->csplit_retry_count = 0;
 
 	update_urb_state_xfer_intr(hc, hc_regs, qtd->urb, qtd,
 				   DWC_OTG_HC_XFER_NYET);
@@ -2015,6 +2047,7 @@ static int32_t handle_hc_datatglerr_intr(dwc_otg_hcd_t * hcd,
 			disable_hc_int(hc_regs, nak);
 		}
 		qtd->error_count = 0;
+		qtd->csplit_retry_count = 0;
 	}
 
 	disable_hc_int(hc_regs, datatglerr);
@@ -2148,6 +2181,7 @@ static void handle_hc_chhltd_intr_dma(dwc_otg_hcd_t * hcd,
 			if (hcint.b.nyet || hcint.b.nak || hcint.b.ack) {
 				DWC_DEBUGPL(DBG_HCD, "XactErr with NYET/NAK/ACK\n");
 				qtd->error_count = 0;
+				qtd->csplit_retry_count = 0;
 			} else {
 				DWC_DEBUGPL(DBG_HCD, "XactErr without NYET/NAK/ACK\n");
 			}
@@ -2692,6 +2726,7 @@ int32_t dwc_otg_hcd_handle_hc_n_intr(dwc_otg_hcd_t * dwc_otg_hcd, uint32_t num)
 				fiq_print(FIQDBG_ERR, dwc_otg_hcd->fiq_state, "HCDERR%02d", num);
 				if (!dwc_otg_hcd->fiq_state->channel[num].nr_errors) {
 					qtd->error_count = 0;
+					qtd->csplit_retry_count = 0;
 					fiq_print(FIQDBG_ERR, dwc_otg_hcd->fiq_state, "RESET   ");
 				}
 				break;
